!!!
html
  head
    title= title
    script(type='text/javascript', src='http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js')
    script(type='text/javascript', src='http://cdn.labs.musescore.com/sessions/jquery.mpager.min.js')
    script(type='text/javascript', src='http://cdn.labs.musescore.com/sessions/faye.js') 
    //link(rel='stylesheet', href='http://cdn.labs.musescore.com/sessions/smp.min.css')
    link(rel='stylesheet', href='/stylesheets/smp.css')
    script
      var mpager;  

      $(document).ready(function() {
        $("#overlay").hide();
        var delay = #{delay};
        if(delay > 0) {
          $("#overlay").toggle();
          setTimeout(function() { $("#overlay").toggle() }, delay);
        }
        
        $(".trigger").click(function(){
            $(".panel").toggle("fast");
            $(this).toggleClass("active");
            return false;
        });
        
        $("#search-score").click(function(){
            $.getJSON('http://api.musescore.com/services/rest/score.jsonp?oauth_consumer_key=musichackday&callback=?&text=' + $('#input-score').val(),
            function(data) {
                $('#musescore-result').html('');
                if(data && data.length > 0) {
                    $.each(data, function(key, value) {
                        $('#musescore-result').append('<a class="loadscore" href="#" data-scoreid="'+value.id+'">'+value.title+'</a><br/>');
                    });
                    $(".loadscore").click(function() {
                      var targetUrl = "http://musescore.com/node/" + $(this).attr("data-scoreid");
                      var url = "http://#{hostname}/session/#{sessionId}/loadscore?url=" + encodeURIComponent(targetUrl);
                      $.get(url);
                      return false;
                    });
                } 
                else {
                    $('#musescore-result').append('<p>No result</p>');
                }
            } );
            return false;
        });
                
        var client = new Faye.Client('http://#{hostname}/faye');
        var subscription = client.subscribe('/#{sessionId}/action', function(message) {
          if (message.command == "gotomeasure") {
            var measureNumber = message.mn;
            setTimeout(function() {mpager.goTo(measureNumber-1)}, delay);
          }
          else if (message.command == "gotourl") {
            var url = message.url;
            window.location = url;
          }
          else if (message.command == "loadscore") {
            var id = message.id;
            loadScoreById(id);
          }
          else if (message.command == "draw") {
            var cmd = message.cmd; 
            switch ( cmd ) {
                case "mousedown":
                    var page = message.page;
                    var canvas = $('#canvas-' + page);
                    var context = canvas[0].getContext('2d');
                    context.beginPath();
                    context.moveTo(message.x, message.y);
                    break;
                case "mousemove":
                    var page = message.page;
                    var canvas = $('#canvas-' + page);
                    var context = canvas[0].getContext('2d');
                    var tmpColor = context.strokeStyle;
                    var color = message.color;
                    context.strokeStyle = color;
                    context.lineTo(message.x, message.y);
                    context.stroke();
                    context.strokeStyle = tmpColor;
                    break;
                case "mouseup":    
                    break;
                case "clear":
                    $('.canvas').each(function(index) {
                        var canvas = $(this);
                        var context = canvas[0].getContext('2d');
                        context.clearRect(0,0,canvas.width,canvas.height);
                    });
                    break;
            }
          }
        });
        subscription.callback(function() {
          console.log('subscription is now active!');
        });
        subscription.errback(function(error) {
          console.log(error.message);
        });
        
        if(#{id} != -1)
            loadScoreById('#{id}');
        
        function loadScoreById(id){
            $.ajax({
              url: 'http://api.musescore.com/services/rest/score/'+id+'.jsonp?oauth_consumer_key=musichackday',
              dataType: 'jsonp',
              jsonpCallback:"nodeinfo",
              success: function(data) {
                    loadScore(data['id'], data['secret'], data['metadata']['pages'], data['metadata']['dimensions'], data['dates']['lastupdate'], data['title']);
                }
            });
        }
        
        function loadScore(id, secret, pageCount, dimensions, scoreChanged, title) {
        
            document.title = title;
            var mmToPixel = (827/210);
            
            var maxPageWidth = $('#smp-pages').width();
            var pageWidth = parseInt(dimensions.split('x')[0]) * mmToPixel;
            
            //clear it
            $('#smp-pages').html('');
            
            mpager = $("#smp-pages").mpager({
    
              api: true,
    
              pages : pageCount,
    
              scoreId : id,
    
              scoreSecret : secret,
              scoreChanged: scoreChanged,
    
              apiServer : "http://api.musescore.com",
    
              staticBucket : "static.musescore.com",
    
              measureClickCallback : measureClick,
    
              //measureChangeCallback: measureChange,
    
              pageWidth: pageWidth,
    
              defaultMeasure: -1,
    
              bottomPadding: 10,
              scrollToMeasure: true,
    
              consumerKey: "musichackday",
              cMode: 0
            });
            $('.mpager-page').each(function(index) {
                var w = $('#pageimg-' + index).width();
                var h = $('#pageimg-' + index).width();
                $(this).append('<canvas class="canvas" id="canvas-'+ index +'" width="'+w+'px" height="'+h+'">Canvas not supported</canvas>');
            });
            $('.canvas').each(function(index) {
                var canvas = $(this);
                var role = 'teacher';
                var color = "rgba(255,255,0,0.1)";
                // get the canvas element and its context
                var context = canvas[0].getContext('2d');
                context.strokeStyle = color;
                context.fillStyle = color;
                context.lineWidth=4;

                // create a drawer which tracks touch movements
                var drawer = {
                    isDrawing: false, isClearing: false,
                    touchstart: function(coors){
                        //context.beginPath();
                        //context.moveTo(coors.x, coors.y);
                        this.isDrawing = true;
                        client.publish('/#{sessionId}/action', {
                            command:"draw",
                            cmd:"mousedown",
                            x:coors.x,
                            y:coors.y,
                            page:index
                        });
                    },
                    mousedown: function(coors){
                        var localoffsetX=canvas.offset().left;
                        var localoffsetY=canvas.offset().top;
                        var localx =Math.floor(coors.x-localoffsetX);
                        var localy =Math.floor(coors.y-localoffsetY);
                        //context.beginPath();
                        //context.moveTo(localx, localy);
                        this.isDrawing = true;
                        client.publish('/#{sessionId}/action', {
                            command:"draw",
                            cmd:"mousedown",
                            x:localx,
                            y:localy,
                            page:index
                        });
                    },
                    touchmove: function(coors){
                        if (this.isDrawing && !this.isClearing) {
                            //context.lineTo(coors.x, coors.y);
                            //context.stroke();
                            client.publish('/#{sessionId}/action', {
                                command:"draw",
                                cmd:"mousemove",
                                x:coors.x,
                                y:coors.y,
                                page:index,
                                color:context.strokeStyle
                            });
                        }
                    },
                    mousemove: function(coors){
                        if (this.isDrawing && !this.isClearing) {
                            var localoffsetX = canvas.offset().left;
                            var localoffsetY = canvas.offset().top;
                            var localx = Math.floor(coors.x-localoffsetX);
                            var localy = Math.floor(coors.y-localoffsetY);
                            //context.lineTo(localx, localy);
                            //context.stroke();
                            client.publish('/#{sessionId}/action', {
                                command:"draw",
                                cmd:"mousemove",
                                x:localx,
                                y:localy,
                                page:index,
                                color:context.strokeStyle
                            });
                        }
                    },
                    touchend: function(coors){
                        if (this.isDrawing) {
                            this.touchmove(coors);
                            this.isDrawing = false;
                            client.publish('/#{sessionId}/action', {
                                command:"draw",
                                cmd:"mouseup",
                            });
                        }
                    },
                    mouseup: function(coors){
                        if (this.isDrawing) {
                            this.touchmove(coors);
                            this.isDrawing = false;
                            client.publish('/#{sessionId}/action', {
                                command:"draw",
                                cmd:"mouseup",
                            });
                        }
                    },
                    gesturestart: function() {
                        if(role == 'teacher')
                            this.isClearing = true;
                    },
                    gestureend: function() {
                        if(role == 'teacher') {
                            context.clearRect(0,0,canvas.width,canvas.height);
                            client.publish('/#{sessionId}/action', {
                                command:"draw",
                                cmd:"clear"
                            });
                            this.isClearing = false;
                        }
                    }
                }; // drawer
        
                // create a function to pass touch events and coordinates to drawer
                function draw(event){
                    // get the touch coordinates
                    var coors;
                    if(event.targetTouches) 
                        coors = {
                            x: event.targetTouches[0].pageX,
                            y: event.targetTouches[0].pageY
                        };
                    else {

                        coors = {
                            x: event.pageX,
                            y: event.pageY
                        };
                    }
                    // pass the coordinates to the appropriate handler
                    drawer[event.type](coors);
                }
                
                // attach the touchstart, touchmove, touchend event listeners.
                canvas[0].addEventListener('touchstart',draw, false);
                canvas[0].addEventListener('touchmove',draw, false);
                canvas[0].addEventListener('touchend',draw, false);
                canvas[0].addEventListener('mousedown',draw, false);
                canvas[0].addEventListener('mousemove',draw, false);
                canvas[0].addEventListener('mouseup',draw, false);
                canvas[0].addEventListener('gesturestart',draw, false);
                canvas[0].addEventListener('gestureend',draw, false);    
            });
        } //End of load score           
        
        
        function measureClick(element, id) {
          mpager.highlightMeasure(element, id);
        }        
      });
    script
      var _gaq = _gaq || [];
      _gaq.push(['_setAccount', 'UA-11896755-6']);
      _gaq.push(['_trackPageview']);
        
      (function() {
        var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
        ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
        var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
       })();      
  body

    #smp-pages.smp-pages
    #overlay
      #overlay-content
        p Please wait...
    #panel.panel
        #search-score-block
            p Search score 
                input#input-score
                a(id='search-score', href='#') Search
            #musescore-result
        #search-audio-block
            p Search audio
                input#input-audio
                a(id='search-audio', href='#') Search
            div#audio-result
    a(class='trigger', href='#') Settings